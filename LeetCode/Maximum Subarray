Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

Time Complexity: O(n^3)
import java.lang.Math;
import java.io.*;
class Solution {
    Integer max=Integer.MIN_VALUE;
    int sum=0;
    public int sum(int[] arr)
    {
        sum=0;
        for(int i=0;i<arr.length;i++)
        {
            sum+=arr[i];
        }
        return sum;
    }
    public int maxSubArray(int[] nums) {
        int[] arr;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i;j<nums.length;j++)
            {
               arr= new int[j+1];
                for(int k=i;k<=j;k++)
                {
                    //System.out.print(nums[k]+" ");
                   arr[k]=nums[k]; 
                }
                int out=sum(arr);
               // System.out.println(" =="+out);
                if(out>max)
                {
                    
                    max=out;
                }
            }
          
        }
        return max;
    }
}

-------------------------------------------


Time Complexity: O(n)

import java.lang.Math;
class Solution {
    public int maxSubArray(int[] nums) {
        Integer sum = Integer.MIN_VALUE;
        Integer max = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            sum=Math.max(0,sum);
            sum=sum+nums[i];
            max=Math.max(sum,max);
        }
        return max;

    }
}
