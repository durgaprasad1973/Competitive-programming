The management of an educational institution has outsourced the task of allocating and managing student projects. There are  students, whose project IDs are numbered from  to .

Students who are friends with one-another tend to form a group and present together.

Student  decides to have an early-stage project showcase, independent from student project . In order to prevent plagiarism, only the following students can be invited to the showcase.

Should be friends with Student 1.
Should not be friends with Student 2.
Should not be friends with someone(except Student 1) who are friends with Student 2.
Obviously Student 2 can not be invited as well. Given the friendship relations, your task is to determine the number of students invited by student 1 for presentation.

For example, in the friendship relations below, we can see that [3, 4, 5] are friends with 1. Now, 4 is friends with 2 and hence cannot be invited. Also, 3 cannot be invited as he is friends with 6 who is friends with 2. So, Student 1 invites only [5] to the presentation. Note that the third constraint is not applicable for 5 as 1 as an intermediate friend should not be considered for this constraint.

image

Input Format

The input contains several test scenarios to be handled. In the first line there, there is a single integer  denoting the number of the scenarios. After that, description of scenarios are given in the following format:

In the first line, there are two space-separated integers  and  denoting the total number of students and the number of pairs of students friends with each other.
Then,  lines follow.
The -th of these lines contains two space-separated integers  and denotes that students  and  are friends.
Constraints

 Sum of ,  over all test cases 
Output Format

Print exactly  lines. In the -th of them print, in increasing order, space-separated IDs of students who are going to be invited to the project showcase, or print -1 if nobody can be invited.

Sample Input 0

2
3 2
1 2
3 2
9 8
1 3
1 4
3 2
5 6
7 1
2 8
8 9
9 1
Sample Output 0

-1
4 7
Explanation 0

In case 1, student 1 and 2 cannot be paired, and student 3 knows student 2 personally. So, no one will be invited to the party. Hence, the output is .
image
- In case 2, student 1 knows students 3,4,7 and 9 personally. However, students 3 and 8 know student 2. And student 8 knows student 9. Therefore, student 1 invites students 4 and 7 only.

image


######################################################

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'configureProjectPresentation' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. 2D_INTEGER_ARRAY friendships
     */

    public static void configureProjectPresentation(int n, List<List<Integer>> friendships) {
    // Write your code here
// Write your code here
        // int[] onefrnd=new int[n];
        // int[] twofrnd=new int[n];
        ArrayList<Integer> onefrnd=new ArrayList<Integer>();
        ArrayList<Integer> twofrnd=new ArrayList<Integer>();
        HashSet<Integer> twofrnd_frnd=new HashSet<Integer>();

        //System.out.println(friendships.size());
        for(int i=0;i<friendships.size();i++)
        {
            for(int j=0;j<1;j++)
            {
                if(friendships.get(i).get(j)==1)
                {
                    if(friendships.get(i).get(j+1)!=2)
                    {
                    onefrnd.add(friendships.get(i).get(j+1));
                    }
                }
                if(friendships.get(i).get(j+1)==1)
                {
                    if(friendships.get(i).get(j)!=2)
                    {
                    onefrnd.add(friendships.get(i).get(j));
                    }
                }
                if(friendships.get(i).get(j)==2)
                {
                    if(friendships.get(i).get(j+1)!=1)
                    {
                    
                    twofrnd.add(friendships.get(i).get(j+1));
                    }
                }
                if(friendships.get(i).get(j+1)==2)
                {
                    if(friendships.get(i).get(j)!=1)
                    {
                    twofrnd.add(friendships.get(i).get(j));
                    }
                }
                
            }
        }
        //System.out.println("1 frnd"+onefrnd);
       //System.out.println("2 frnd---"+twofrnd);
        Iterator<Integer> itr=twofrnd.iterator();
        while(itr.hasNext())
        {
            int num=itr.next();
            for(int i=0;i<friendships.size();i++)
        {
            for(int j=0;j<1;j++)
            {
                if(friendships.get(i).get(j)==num)
                {
                    if((friendships.get(i).get(j+1)!=2)&&(friendships.get(i).get(j+1)!=1))
                    {
                    twofrnd_frnd.add(friendships.get(i).get(j+1));
                    }
                }
                if(friendships.get(i).get(j+1)==num)
                {
                    if((friendships.get(i).get(j)!=2)&&(friendships.get(i).get(j)!=1))
                    {
                    twofrnd_frnd.add(friendships.get(i).get(j));
                    }
                }
            }
        }
        }
       // System.out.println("2 sub frnd-"+twofrnd_frnd);
         twofrnd.addAll(twofrnd_frnd);
                //System.out.println("2 total frnd--"+twofrnd);
     onefrnd.removeAll(twofrnd);
                     //  System.out.println("final 1frnd-"+onefrnd);
        Collections.sort(onefrnd);
        if(onefrnd.isEmpty()!=true)
        {
        //return onefrnd;
             Iterator<Integer> itr2=onefrnd.iterator();
while(itr2.hasNext())
{
    System.out.print(itr2.next()+" ");
}
        }
        else
        {
            System.out.print(-1);
        }
System.out.println();
        
    }
    }

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
       // BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                int n = Integer.parseInt(firstMultipleInput[0]);

                int m = Integer.parseInt(firstMultipleInput[1]);

                List<List<Integer>> freiendships = new ArrayList<>();

                IntStream.range(0, m).forEach(i -> {
                    try {
                        freiendships.add(
                            Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                                .map(Integer::parseInt)
                                .collect(toList())
                        );
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

                //List<Integer> result =
                    Result.configureProjectPresentation(n, freiendships);

                //bufferedWriter.write(
                    // result.stream()
                    //     .map(Object::toString)
                    //     .collect(joining(" "))
                    // + "\n"
                    
               // );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

       // bufferedReader.close();
       // bufferedWriter.close();
    }
}
