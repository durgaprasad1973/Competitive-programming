Given a string  consisting of only 0’s and 1’s, you are required to compute the co-effecient of the string.

Firstly,

Count the number of all 0’s between two consecutive 1’s. Let’s say that number is .
Count the number of all 1’s between two consecutive 0’s. Let’s say that number is .
The string co-efficient will be .

Given “”.

Hence, the string co-efficient is .

The aim is to minimize the string co-efficient with at most p operations. In each operation, you can choose any two indices , of the string and flip all the characters of  such that ().

Can you determine the least value of the string co-efficient using at most  operations?

Input Format

The first line contains two space-separated integers ,  : The length of the string and number of operations that can be performed, respectively. The next line contains a string  of length .

Constraints

1 ≤  ≤ 
0 ≤  ≤ 
Output Format

Print the least value of the string co-efficient using at most  operations.

Sample Input 0

4 1
1101
Sample Output 0

0
Explanation 0

One optimal way is to flip in the range .

We have .

a =  = 
b = 
Hence, the string coefficient is .

Sample Input 1

7 1
1011010
Sample Output 1

2
Explanation 1

One optimal way is to flip in the range .

We have 1111010$.

a =  = 
b = 
Hence, the string coefficient is  = .



############################################

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minStringCoeff' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER p
     */

 public static int minStringCoeff(String s, int p) {
    // Write your code here
         
        char[] ch=s.toCharArray();
        for(int j=0;j<p;j++)
        {
            int zero_count=0;
        int one_count=0;
            int a,b,res;
        for(int i=0;i<s.length();i++)
        {
            if(ch[i]=='0')
            {
                zero_count++;
            }
            else if(ch[i]=='1')
            {
                one_count++;
            }
                
           // System.out.println(ch[i]);
        }
     
              //  System.out.println(zero_count+" "+one_count);

        if(zero_count<one_count)
        {
            int[] itr=new int[s.length()];
            for(int i=0;i<s.length();i++)
            {
                a=b=res=0;
                
                if(ch[i]=='0')
                {
                    int count;
                    ch[i]='1';
                    for(int k=0;k<s.length();k++)
                    {
                        if(k+1<s.length())
                        {
                        count=0;
                        if((ch[k]=='1')&&(ch[k+1]=='0'))
                        {
                            if(k+2<s.length())
                            {
                            for(int l=k+1;l<s.length();l++)
                            {
                                if(ch[l]=='1')
                                {
                                    break;
                                }
                                else
                                {
                                count++;
                                }
                            }
                            a=a+count;
                            System.out.println(k+"k--a"+a);
                            }
                         }
                        count=0;
                        if((ch[k]=='0')&&(ch[k+1]=='1'))
                        {
                            if(k+2<s.length())
                            {
                            for(int l=k+1;l<s.length();l++)
                            {
                                if(ch[l]=='0')
                                {
                                    break;
                                }
                                else
                                {
                                count++;
                                }
                            }
                            b=b+count; 
                            System.out.println(k+"k--b"+b);
                            }

                         }
                   
                    }
                    
                    }
                    res=a+b; 
                     itr[i]=res;
                      System.out.println(i+"i--res+" +res);
                ch[i]='0';

                }
            }
        int[] itr_new=itr.clone();
        Arrays.sort(itr_new);
        for(int z=0;z<itr.length;z++)
        {
            //System.out.println(itr[z]);
            if(itr_new[z]!=0)
            {
                return itr_new[z];
                //System.out.print(itr_new[z]);
               // break;
            }
        }
        }
        else
        {
            int[] itr2=new int[s.length()];
            for(int i=0;i<s.length();i++)
            {
                a=b=res=0;
                if(ch[i]=='1')
                {
                    int count;
                    ch[i]='0';
                    for(int k=0;k<s.length();k++)
                    {
                        if(k+1<s.length())
                        {
                        count=0;
                        if((ch[k]=='1')&&(ch[k+1]=='0'))
                        {
                            for(int l=k+1;l<s.length();l++)
                            {
                                if(ch[l]=='1')
                                {
                                    break;
                                }
                                else
                                {
                                count++;
                                }
                            }
                            a=a+count;
                            
                         }
                        //count=0;
                        if((ch[k]=='0')&&(ch[k+1]=='1'))
                        {
                            for(int l=k+1;l<s.length();l++)
                            {
                                if(ch[l]=='0')
                                {
                                    break;
                                }
                                else
                                {
                                count++;
                                }
                            }
                            b=b+count;  
                         }
                    
                    }
                    
                    }
                    res=a+b; 
                     itr2[i]=res;
                     // System.out.print(res+" -");
                ch[i]='1';

                }
            }
            int[] itr_new2=itr2.clone();
        Arrays.sort(itr_new2);
        for(int z=0;z<itr2.length;z++)
        {
            //System.out.println(itr[z]);
            if(itr_new2[z]!=0)
            {
                return itr_new2[z];
                //System.out.print(itr_new2[z]);
                //break;
            }
        }
        }
        
        }
     return 0;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int p = Integer.parseInt(firstMultipleInput[1]);

        String s = bufferedReader.readLine();

      int out=  Result.minStringCoeff(s, p);

        bufferedWriter.write(String.valueOf(out));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
